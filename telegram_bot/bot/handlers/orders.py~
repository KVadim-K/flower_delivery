from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from telegram_bot.bot.states.order_states import OrderStates
from telegram_bot.bot.utils.api_client import APIClient, get_user_api_token
from telegram_bot.bot.keyboards.inline import confirm_order_kb, navigation_kb
import logging
import os  # –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –æ–∫—Ä—É–∂–µ–Ω–∏—è
import re  # –î–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤–≤–æ–¥–∞

logger = logging.getLogger(__name__)

router = Router()

# –ü–æ–ª—É—á–∞–µ–º API_URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_URL = os.getenv('API_URL')
SITE_URL = os.getenv('SITE_URL')  # –î–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é

if not API_URL:
    logger.error("API_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    raise EnvironmentError("API_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

if not SITE_URL:
    logger.error("SITE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    raise EnvironmentError("SITE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")


async def initiate_order_creation(source, state: FSMContext):
    """
    –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –∏–∑ –∫–æ–º–∞–Ω–¥—ã /order –∏ –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑"
    :param source: –æ–±—ä–µ–∫—Ç Message –∏–ª–∏ CallbackQuery
    :param state: –æ–±—ä–µ–∫—Ç FSMContext
    """
    if isinstance(source, Message):
        send_message = source.answer
        user = source.from_user
    elif isinstance(source, CallbackQuery):
        send_message = source.message.edit_text
        user = source.from_user
    else:
        logger.error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞")
        return

    telegram_id = user.id
    logger.debug(f"–ò–Ω–∏—Ü–∏–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
    await send_message("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤...")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ API-—Ç–æ–∫–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_api_token = await get_user_api_token(telegram_id)
    if not user_api_token:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ —Å–≤—è–∑–∞–Ω —Å —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å—å—é.")
        registration_link = f"{SITE_URL}/register/"
        await send_message(
            "üö´ –í–∞—à Telegram –∞–∫–∫–∞—É–Ω—Ç –Ω–µ —Å–≤—è–∑–∞–Ω —Å —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å—å—é –Ω–∞ —Å–∞–π—Ç–µ.\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ: [–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è]({registration_link})\n"
            "–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /link –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤.",
            parse_mode="Markdown",
            disable_web_page_preview=True
        )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
    current_state = await state.get_state()
    if current_state and current_state not in [
        OrderStates.waiting_for_product_selection.state,
        OrderStates.waiting_for_quantity.state,
        OrderStates.adding_more_products.state,
    ]:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –ø—ã—Ç–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑, –Ω–æ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑.")
        await send_message(
            "‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ."
        )
        return

    api_client = APIClient(token=user_api_token)
    logger.debug(f"APIClient –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")

    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ API
        products = await api_client.get_products()
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {products}")
        if not products:
            logger.info(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.")
            await send_message("üì¶ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(products=products)

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text=f"{product['name']} - {product['price']}‚ÇΩ",
                        callback_data=f"select_product:{product['id']}"
                    )
                ]
                for product in products
            ] + [[
                InlineKeyboardButton(
                    text="üõí –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞",
                    callback_data="proceed_to_checkout"
                )
            ]],
            row_width=1
        )

        logger.debug(f"–ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
        await send_message("üõçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:", reply_markup=keyboard)
        await state.set_state(OrderStates.waiting_for_product_selection)
        logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ waiting_for_product_selection")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
        await send_message("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await api_client.close()
        logger.debug(f"APIClient –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –∑–∞–∫—Ä—ã—Ç")


@router.message(Command(commands=["order"]))
async def cmd_order(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /order ‚Äî –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
    """
    await initiate_order_creation(message, state)


@router.callback_query(F.data.startswith("select_product:"))
async def select_product_callback(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    telegram_id = callback.from_user.id
    product_id = callback.data.split(":")[1]
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –≤—ã–±—Ä–∞–ª –ø—Ä–æ–¥—É–∫—Ç —Å ID {product_id}.")

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
    user_data = await state.get_data()
    products = user_data.get('products', [])
    product = next((p for p in products if str(p['id']) == product_id), None)
    if not product:
        await callback.answer("‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    await state.update_data(selected_product=product)
    await state.set_state(OrderStates.waiting_for_quantity)

    await callback.message.edit_text(f"üì¶ –í—ã –≤—ã–±—Ä–∞–ª–∏: {product['name']}.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
    await callback.answer()


@router.message(OrderStates.waiting_for_quantity, F.text)
async def process_quantity(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ç–æ–≤–∞—Ä—ã –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é
    """
    quantity_text = message.text.strip()
    telegram_id = message.from_user.id

    if not quantity_text.isdigit() or int(quantity_text) <= 0:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –≤–≤—ë–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: '{quantity_text}'.")
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –±–æ–ª—å—à–µ–µ 0):")
        return

    quantity = int(quantity_text)
    user_data = await state.get_data()
    product = user_data.get('selected_product')

    if not product:
        logger.error(f"–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}.")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    # **–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:** –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ü–µ–Ω—É –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ —á–∏—Å–ª–æ
    try:
        price = float(product['price'])
    except ValueError:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ü–µ–Ω—É –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ —á–∏—Å–ª–æ: {product['price']}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å —Ü–µ–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        return

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É (—Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏)
    cart = user_data.get('cart', [])
    cart.append({
        'product_id': product['id'],
        'product_name': product['name'],
        'quantity': quantity,
        'price': price  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—É –∫–∞–∫ —á–∏—Å–ª–æ
    })
    await state.update_data(cart=cart)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –¥–æ–±–∞–≤–∏–ª '{quantity}' –µ–¥–∏–Ω–∏—Ü –ø—Ä–æ–¥—É–∫—Ç–∞ '{product['name']}' –≤ –∫–æ—Ä–∑–∏–Ω—É.")

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ç–æ–≤–∞—Ä—ã –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ç–æ–≤–∞—Ä",
                    callback_data="add_more_products"
                ),
                InlineKeyboardButton(
                    text="üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑",
                    callback_data="proceed_to_checkout"
                )
            ]
        ],
        row_width=2
    )

    await message.answer("–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ç–æ–≤–∞—Ä—ã –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞?", reply_markup=keyboard)
    await state.set_state(OrderStates.adding_more_products)
    logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ adding_more_products")


@router.callback_query(F.data == "add_more_products")
async def add_more_products_callback(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –µ—â–µ —Ç–æ–≤–∞—Ä–æ–≤
    """
    telegram_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} —Ä–µ—à–∏–ª –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ç–æ–≤–∞—Ä–æ–≤.")

    user_data = await state.get_data()
    products = user_data.get('products', [])

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"{product['name']} - {product['price']}‚ÇΩ",
                    callback_data=f"select_product:{product['id']}"
                )
            ]
            for product in products
        ] + [[
            InlineKeyboardButton(
                text="üõí –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞",
                callback_data="proceed_to_checkout"
            )
        ]],
        row_width=1
    )

    await callback.message.edit_text("üõçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:", reply_markup=keyboard)
    await state.set_state(OrderStates.waiting_for_product_selection)
    logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ waiting_for_product_selection")
    await callback.answer()


@router.callback_query(F.data == "proceed_to_checkout")
async def proceed_to_checkout_callback(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞
    """
    telegram_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞.")

    user_data = await state.get_data()
    cart = user_data.get('cart', [])

    if not cart:
        await callback.answer("‚ùó –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã.", show_alert=True)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –∫–æ—Ä–∑–∏–Ω—ã
    cart_text = "üõí <b>–í–∞—à –∑–∞–∫–∞–∑:</b>\n\n"
    total_price = 0
    for item in cart:
        # **–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:** –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ü–µ–Ω–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - —á–∏—Å–ª–∞
        try:
            item_price = float(item['price'])
            item_quantity = int(item['quantity'])
            item_total = item_price * item_quantity
            total_price += item_total
            cart_text += f"üå∏ {item['product_name']} x {item_quantity} = {item_total:.2f}‚ÇΩ\n"
        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
            await callback.message.edit_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await state.clear()
            return

    cart_text += f"\nüí∞ <b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_price:.2f}‚ÇΩ</b>\n\n"
    cart_text += "üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:"

    await callback.message.edit_text(cart_text, parse_mode='HTML')
    await state.update_data(total_price=total_price)
    await state.set_state(OrderStates.waiting_for_address)
    logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ waiting_for_address")
    await callback.answer()


@router.message(OrderStates.waiting_for_address, F.text)
async def process_address(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –≤–≤–æ–¥—É –≥–æ—Ä–æ–¥–∞
    """
    address = message.text.strip()
    telegram_id = message.from_user.id

    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞
    if len(address.split()) < 2:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –≤–≤—ë–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å: '{address}'.")
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å, –≤–∫–ª—é—á–∞—è —É–ª–∏—Ü—É –∏ –Ω–æ–º–µ—Ä –¥–æ–º–∞:")
        return

    await state.update_data(address=address)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –≤–≤—ë–ª –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {address}")

    await message.answer("üèôÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:")
    await state.set_state(OrderStates.waiting_for_city)
    logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ waiting_for_city")


@router.message(OrderStates.waiting_for_city, F.text)
async def process_city(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –≤–≤–æ–¥—É –ø–æ—á—Ç–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
    """
    city = message.text.strip()
    telegram_id = message.from_user.id

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≥–æ—Ä–æ–¥–∞ (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã)
    if not re.match(r'^[A-Za-z–ê-–Ø–∞-—è–Å—ë\s-]+$', city):
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –≤–≤—ë–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ—Ä–æ–¥: '{city}'.")
        await message.answer("‚ùó –ì–æ—Ä–æ–¥ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:")
        return

    await state.update_data(city=city)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –≤–≤—ë–ª –≥–æ—Ä–æ–¥: {city}")

    await message.answer("üìÆ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å (6 —Ü–∏—Ñ—Ä):")
    await state.set_state(OrderStates.waiting_for_postal_code)
    logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ waiting_for_postal_code")


@router.message(OrderStates.waiting_for_postal_code, F.text)
async def process_postal_code(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—á—Ç–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –≤–≤–æ–¥—É –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    """
    postal_code = message.text.strip()
    telegram_id = message.from_user.id

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ—á—Ç–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ (6 —Ü–∏—Ñ—Ä)
    if not re.match(r'^\d{6}$', postal_code):
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –≤–≤—ë–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å: '{postal_code}'.")
        await message.answer("‚ùó –ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 6 —Ü–∏—Ñ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å:")
        return

    await state.update_data(postal_code=postal_code)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –≤–≤—ë–ª –ø–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å: {postal_code}")

    await message.answer("üì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX):")
    await state.set_state(OrderStates.waiting_for_phone_number)
    logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ waiting_for_phone_number")


@router.message(OrderStates.waiting_for_phone_number, F.text)
async def process_phone_number(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞
    """
    phone_number = message.text.strip()
    telegram_id = message.from_user.id

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not re.match(r'^(\+7|8)\d{10}$', phone_number):
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –≤–≤—ë–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: '{phone_number}'.")
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX:")
        return

    await state.update_data(phone_number=phone_number)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –≤–≤—ë–ª –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}")

    user_data = await state.get_data()
    cart = user_data.get('cart', [])
    address = user_data.get('address')
    city = user_data.get('city')
    postal_code = user_data.get('postal_code')
    total_price = user_data.get('total_price', 0)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    order_summary = "üìã **–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑:**\n\n"
    for item in cart:
        item_total = item['price'] * item['quantity']
        order_summary += f"üå∏ {item['product_name']} x {item['quantity']} = {item_total:.2f}‚ÇΩ\n"
    order_summary += f"\nüí∞ **–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:** {total_price:.2f}‚ÇΩ\n"
    order_summary += f"\nüìç **–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:** {address}, {city}, {postal_code}\n"
    order_summary += f"üì± **–¢–µ–ª–µ—Ñ–æ–Ω:** {phone_number}\n"

    await message.answer(order_summary, reply_markup=confirm_order_kb, parse_mode='Markdown')
    await state.set_state(OrderStates.waiting_for_confirmation)
    logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ waiting_for_confirmation")


@router.callback_query(F.data == "confirm_order")
async def confirm_order(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    """
    telegram_id = callback.from_user.id
    user_data = await state.get_data()

    cart = user_data.get('cart', [])
    address = user_data.get('address')
    city = user_data.get('city')
    postal_code = user_data.get('postal_code')
    phone_number = user_data.get('phone_number')

    # –ü–æ–ª—É—á–µ–Ω–∏–µ API-—Ç–æ–∫–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_api_token = await get_user_api_token(telegram_id)
    if not user_api_token:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ —Å–≤—è–∑–∞–Ω —Å —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å—å—é.")
        await callback.message.edit_text("üö´ –í–∞—à Telegram –∞–∫–∫–∞—É–Ω—Ç –Ω–µ —Å–≤—è–∑–∞–Ω —Å —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å—å—é –Ω–∞ —Å–∞–π—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /link –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è.")
        await state.clear()
        return

    api_client = APIClient(token=user_api_token)
    logger.debug(f"APIClient –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")

    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ API
        order_items = [
            {"product": item['product_id'], "quantity": item['quantity']}
            for item in cart
        ]

        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ API —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
        order_response = await api_client.create_order(
            order_items=order_items,
            address=address,
            city=city,
            postal_code=postal_code,
            phone_number=phone_number
        )
        logger.debug(f"–û—Ç–≤–µ—Ç –æ—Ç API –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {order_response}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è 'id' –≤ –æ—Ç–≤–µ—Ç–µ
        if 'id' not in order_response:
            logger.error(f"–û—Ç–≤–µ—Ç API –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 'id': {order_response}")
            await callback.message.edit_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        order_id = order_response['id']
        logger.info(f"–ó–∞–∫–∞–∑ ‚Ññ{order_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}.")

        await callback.message.edit_text(f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        await state.clear()
        await callback.answer()
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
        await callback.message.edit_text(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {str(e)}")
    finally:
        await api_client.close()
        logger.debug(f"APIClient –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –∑–∞–∫—Ä—ã—Ç")


@router.callback_query(F.data == "cancel_order")
async def cancel_order(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞
    """
    telegram_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑.")
    await state.clear()
    await callback.message.edit_text("‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.")
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑" –∏–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@router.callback_query(F.data == "create_order")
async def create_order_callback(callback: CallbackQuery, state: FSMContext):
    await initiate_order_creation(callback, state)
    await callback.answer()
