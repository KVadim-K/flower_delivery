# telegramadmin_bot/tasks.py

from celery import shared_task
from orders.models import Order
from telegramadmin_bot.config import ADMIN_TELEGRAM_IDS, ADMIN_BOT_TOKEN
import logging
from asgiref.sync import async_to_sync
from aiogram import Bot, types
from django.conf import settings

logger = logging.getLogger('telegramadmin_bot')

@shared_task
def send_new_order_notification(order_id):
    try:
        order = Order.objects.prefetch_related('order_items__product').get(id=order_id)
    except Order.DoesNotExist:
        logger.error(f"–ó–∞–∫–∞–∑ —Å ID {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
    message = (
        f"üì¶ **–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ID: {order.id}**\n"
        f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {order.user.username}\n"
        f"**–°—Ç–∞—Ç—É—Å:** {order.get_status_display()}\n"
        f"**–î–∞—Ç–∞:** {order.created_at.strftime('%Y-%m-%d %H:%M')}\n"
        f"**–ê–¥—Ä–µ—Å:** {order.address}, {order.city}, {order.postal_code}\n"
        f"**–¢–µ–ª–µ—Ñ–æ–Ω:** {order.phone_number}\n"
        f"**–°—É–º–º–∞:** {order.total_price} ‚ÇΩ\n"
        f"**–¢–æ–≤–∞—Ä—ã:**\n"
    )
    for item in order.order_items.all():
        message += f"- {item.product.name} x {item.quantity} = {item.product.price * item.quantity} ‚ÇΩ\n"

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
    bot = Bot(token=ADMIN_BOT_TOKEN)

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    detail_button = types.InlineKeyboardButton(text="–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞", callback_data=f"detail_{order.id}")
    change_status_button = types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"change_{order.id}")
    keyboard = types.InlineKeyboardMarkup(row_width=2).add(detail_button, change_status_button)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    for admin_id in ADMIN_TELEGRAM_IDS:
        try:
            async_to_sync(bot.send_message)(
                chat_id=admin_id,
                text=message,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

    bot.close()
