from aiogram import Router, types
from aiogram.filters import Command
from telegramadmin_bot.config import ADMIN_TELEGRAM_IDS
from asgiref.sync import sync_to_async
from orders.models import Order
from django.db.models import Sum, Count, F, ExpressionWrapper, FloatField
from django.utils import timezone
from django.db.models.functions import TruncDate
import logging
import matplotlib
matplotlib.use('Agg')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–±–∞–∑–æ–≤—ã–π –±—ç–∫–µ–Ω–¥ –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º pyplot
import matplotlib.pyplot as plt
from aiogram.types import BufferedInputFile
import io
import datetime
import asyncio  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º asyncio

logger = logging.getLogger('telegramadmin_bot')

router = Router()

async def is_admin(user_id):
    return user_id in ADMIN_TELEGRAM_IDS

@router.message(Command(commands=['analytics']))
async def order_analytics(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.reply("üö´ **–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.**")
        return

    try:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–∞–∫ /analytics –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        if not message.text or message.text.strip() != "/analytics":
            await message.reply("‚ùó **–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ:** `/analytics`")
            return

        # –£—Å—Ç–∞–Ω–æ–≤–∏–º –ø–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        end_datetime = timezone.now()
        start_datetime = end_datetime - timezone.timedelta(days=30)

        # –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        total_orders = await sync_to_async(Order.objects.filter(created_at__range=(start_datetime, end_datetime)).count)()
        total_sales = (await sync_to_async(Order.objects.filter(created_at__range=(start_datetime, end_datetime)).aggregate)(total_sales=Sum('total_price')))['total_sales'] or 0
        orders_per_status = await sync_to_async(list)(
            Order.objects.filter(created_at__range=(start_datetime, end_datetime))
                        .values('status')
                        .annotate(count=Count('id'))
        )

        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        orders_per_day = await sync_to_async(list)(
            Order.objects.filter(created_at__range=(start_datetime, end_datetime))
                        .annotate(day=TruncDate('created_at'))
                        .values('day')
                        .annotate(count=Count('id'))
                        .order_by('day')
        )

        sales_per_day = await sync_to_async(list)(
            Order.objects.filter(created_at__range=(start_datetime, end_datetime))
                        .annotate(day=TruncDate('created_at'))
                        .values('day')
                        .annotate(total_sales=Sum('total_price'))
                        .order_by('day')
        )

        # –¢–æ–ø-—Ç–æ–≤–∞—Ä–æ–≤
        best_selling_products = await sync_to_async(list)(
            Order.objects.values('order_items__product__name')
                        .annotate(total_quantity=Sum('order_items__quantity'))
                        .order_by('-total_quantity')[:5]
        )

        highest_revenue_products = await sync_to_async(list)(
            Order.objects.values('order_items__product__name')
                        .annotate(total_revenue=Sum(ExpressionWrapper(F('order_items__quantity') * F('order_items__product__price'), output_field=FloatField())))
                        .order_by('-total_revenue')[:5]
        )

        # –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞
        average_order_value = total_sales / total_orders if total_orders else 0

        # –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        unique_customers = await sync_to_async(Order.objects.filter(created_at__range=(start_datetime, end_datetime)).values('user').distinct().count)()
        new_customers = await sync_to_async(Order.objects.filter(
            created_at__range=(start_datetime, end_datetime),
            user__orders__created_at__lt=start_datetime  # –ò—Å–ø–æ–ª—å–∑—É–µ–º related_name='orders'
        ).values('user').distinct().count)()
        returning_customers = unique_customers - new_customers

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
        if not orders_per_day:
            await message.reply("üìâ **–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.**")
        else:
            buf = io.BytesIO()

            # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ `orders_per_day` –∏ `sales_per_day` —É–∂–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            days = [item['day'] for item in orders_per_day]
            order_counts = [item['count'] for item in orders_per_day]
            sales = [item['total_sales'] for item in sales_per_day]
            def plot():
                fig, ax1 = plt.subplots(figsize=(10, 5))

                # –õ–∏–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–æ–≤
                ax1.plot(days, order_counts, marker='o', linestyle='-', color='blue', label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤")
                ax1.set_xlabel('–î–∞—Ç–∞')
                ax1.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤', color='blue')
                ax1.tick_params(axis='y', labelcolor='blue')

                # –í—Ç–æ—Ä–∞—è –æ—Å—å –¥–ª—è –ø—Ä–æ–¥–∞–∂
                ax2 = ax1.twinx()
                ax2.plot(days, sales, marker='x', linestyle='--', color='green', label="–ü—Ä–æ–¥–∞–∂–∏")
                ax2.set_ylabel('–ü—Ä–æ–¥–∞–∂–∏ (‚ÇΩ)', color='green')
                ax2.tick_params(axis='y', labelcolor='green')

                fig.tight_layout()
                plt.title('–ü—Ä–æ–¥–∞–∂–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –¥–Ω—è–º')
                plt.grid(True)
                plt.savefig(buf, format='png')
                plt.close()

            # –ó–∞–ø—É—Å–∫ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            await asyncio.to_thread(plot)
            buf.seek(0)

            # –û–±–µ—Ä–Ω–µ–º –±—É—Ñ–µ—Ä –≤ BufferedInputFile –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            input_file = BufferedInputFile(buf.getvalue(), filename='sales_and_orders_per_day.png')

            await message.reply_photo(
                input_file,
                caption="üìä **–ì—Ä–∞—Ñ–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–æ–≤ –∏ –ø—Ä–æ–¥–∞–∂ –ø–æ –¥–Ω—è–º** üìä",
                parse_mode='Markdown'
            )

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        response = (
            f"üìä **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∑–∞–∫–∞–∑–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π** üìä\n\n"
            f"üî¢ **–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤:** {total_orders}\n"
            f"üí∞ **–û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂:** {total_sales} ‚ÇΩ\n"
            f"üìà **–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞:** {average_order_value:.2f} ‚ÇΩ\n\n"
            f"üë• **–ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:**\n"
            f"- üÜî **–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã:** {unique_customers}\n"
            f"- üÜï **–ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã:** {new_customers}\n"
            f"- üîÑ **–í–æ–∑–≤—Ä–∞—â–∞—é—â–∏–µ—Å—è –∫–ª–∏–µ–Ω—Ç—ã:** {returning_customers}\n\n"
            f"üìÇ **–ó–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:**\n"
        )
        for status_item in orders_per_status:
            status_display = dict(Order.STATUS_CHOICES).get(status_item['status'], status_item['status'])
            response += f"- üü¢ {status_display}: {status_item['count']}\n"

        response += f"\nüìÖ **–ó–∞–∫–∞–∑—ã –ø–æ –¥–Ω—è–º:**\n"
        for day_item in orders_per_day:
            day = day_item['day'].strftime('%Y-%m-%d')
            count = day_item['count']
            response += f"- {day}: {count} \n"

        response += f"\nüíµ **–ü—Ä–æ–¥–∞–∂–∏ –ø–æ –¥–Ω—è–º:**\n"
        for sale_item in sales_per_day:
            day = sale_item['day'].strftime('%Y-%m-%d')
            sales = sale_item['total_sales'] or 0
            response += f"- {day}: {sales} ‚ÇΩ \n"

        response += f"\nüèÜ **–¢–æ–ø-5 —Å–∞–º—ã—Ö –ø—Ä–æ–¥–∞–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:**\n"
        for product in best_selling_products:
            product_name = product['order_items__product__name']
            quantity = product['total_quantity']
            response += f"- {product_name}: {quantity} —à—Ç. \n"

        response += f"\nüí∏ **–¢–æ–ø-5 —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∞–∏–±–æ–ª—å—à–µ–π –≤—ã—Ä—É—á–∫–æ–π:**\n"
        for product in highest_revenue_products:
            product_name = product['order_items__product__name']
            revenue = product['total_revenue'] or 0
            response += f"- {product_name}: {revenue} ‚ÇΩ \n"

        await message.reply(response, parse_mode='Markdown')

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
        await message.reply("‚ö†Ô∏è **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.**")
