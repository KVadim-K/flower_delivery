# telegramadmin_bot/handlers/orders.py

from aiogram import Bot, Router, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from telegramadmin_bot.config import ADMIN_BOT_TOKEN, ADMIN_TELEGRAM_IDS
from orders.models import Order
import logging
import re
from asgiref.sync import sync_to_async

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=ADMIN_BOT_TOKEN)
logger = logging.getLogger('telegramadmin_bot')
router = Router()


async def is_admin(user_id):
    return user_id in ADMIN_TELEGRAM_IDS


@router.message(Command(commands=['orders']))
async def list_orders(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.reply("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    try:
        orders = await sync_to_async(list)(
            Order.objects.select_related("user").prefetch_related("order_items__product").order_by('-created_at')[:10]
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {e}")
        await message.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤.")
        return

    if not orders:
        await message.reply("üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
        return

    for order in orders:
        try:
            username = order.user.username
            status_display = order.get_status_display()
            created_at = order.created_at.strftime('%Y-%m-%d %H:%M')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞ ID {order.id}: {e}")
            continue

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìÑ –î–µ—Ç–∞–ª–∏", callback_data=f"detail_{order.id}"),
                InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"change_{order.id}")
            ]
        ])

        await message.reply(
            f"üî¢ **ID:** {order.id} | üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {username} | üì¶ **–°—Ç–∞—Ç—É—Å:** {status_display} | üìÖ **–î–∞—Ç–∞:** {created_at}",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )


@router.message(Command(commands=['order']))
async def order_details(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.reply("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    try:
        _, order_id_str = message.text.split()
        order_id = int(order_id_str)
        order = await sync_to_async(Order.objects.select_related("user").prefetch_related("order_items__product").get)(id=order_id)
    except (ValueError, Order.DoesNotExist):
        await message.reply("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /order <id>")
        return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ ID {order_id}: {e}")
        await message.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.")
        return

    try:
        username = order.user.username
        status_display = order.get_status_display()
        created_at = order.created_at.strftime('%Y-%m-%d %H:%M')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞ ID {order.id}: {e}")
        await message.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞.")
        return

    response = (
        f"üìÑ **–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ ID: {order.id}**\n"
        f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {username}\n"
        f"üì¶ **–°—Ç–∞—Ç—É—Å:** {status_display}\n"
        f"üìÖ **–î–∞—Ç–∞:** {created_at}\n"
        f"üè† **–ê–¥—Ä–µ—Å:** {order.address}, {order.city}, {order.postal_code}\n"
        f"üì± **–¢–µ–ª–µ—Ñ–æ–Ω:** {order.phone_number}\n"
        f"üí∞ **–°—É–º–º–∞:** {order.total_price} ‚ÇΩ\n"
        f"üõçÔ∏è **–¢–æ–≤–∞—Ä—ã:**\n"
    )

    try:
        order_items = list(order.order_items.all())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–∫–∞–∑–∞ ID {order.id}: {e}")
        await message.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–∫–∞–∑–∞.")
        return

    for item in order_items:
        try:
            product_name = item.product.name
            total_price = item.product.price * item.quantity
            response += f"üå∏ - {product_name} x {item.quantity} = {total_price} ‚ÇΩ\n"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∑–∞–∫–∞–∑–µ ID {order.id}: {e}")
            response += f"‚ùì - –¢–æ–≤–∞—Ä ID {item.id} x {item.quantity} = –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ ‚ÇΩ\n"

    await message.reply(response, parse_mode='Markdown')


@router.message(Command(commands=['changestatus']))
async def change_status_command(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.reply("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    parts = message.text.split()
    if len(parts) != 2:
        await message.reply("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /changestatus <id>")
        return

    order_id_str = parts[1]
    if not order_id_str.isdigit():
        await message.reply("‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–∫–∞–∑–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä.")
        return

    order_id = int(order_id_str)
    try:
        order = await sync_to_async(Order.objects.select_related("user").prefetch_related("order_items__product").get)(id=order_id)
    except Order.DoesNotExist:
        await message.reply("‚ùó –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ ID {order_id}: {e}")
        await message.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.")
        return

    # –°–æ–∑–¥–∞–µ–º —Ç—É –∂–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ –∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=f"üîÑ {status_name}",
                callback_data=f"set_status_{order.id}_{status_code}"
            )
            for status_code, status_name in Order.STATUS_CHOICES if status_code != order.status
        ]
    ])

    await message.reply(
        f"üîÑ **–í—ã–±–æ—Ä –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ ID: {order.id}**",
        reply_markup=keyboard,
        parse_mode='Markdown'
    )


@router.callback_query(lambda call: call.data and (call.data.startswith('detail_') or call.data.startswith('change_')))
async def callback_handler(callback_query: types.CallbackQuery):
    if not await is_admin(callback_query.from_user.id):
        await callback_query.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.", show_alert=True)
        return

    data = callback_query.data
    if data.startswith("detail_"):
        try:
            order_id = int(data.split('_')[1])
            order = await sync_to_async(Order.objects.select_related("user").prefetch_related("order_items__product").get)(id=order_id)
        except (ValueError, Order.DoesNotExist):
            await callback_query.answer("‚ùó –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ ID {order_id}: {e}")
            await callback_query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.", show_alert=True)
            return

        try:
            username = order.user.username
            status_display = order.get_status_display()
            created_at = order.created_at.strftime('%Y-%m-%d %H:%M')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞ ID {order.id}: {e}")
            await callback_query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞.", show_alert=True)
            return

        response = (
            f"üìÑ **–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ ID: {order.id}**\n"
            f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {username}\n"
            f"üì¶ **–°—Ç–∞—Ç—É—Å:** {status_display}\n"
            f"üìÖ **–î–∞—Ç–∞:** {created_at}\n"
            f"üè† **–ê–¥—Ä–µ—Å:** {order.address}, {order.city}, {order.postal_code}\n"
            f"üì± **–¢–µ–ª–µ—Ñ–æ–Ω:** {order.phone_number}\n"
            f"üí∞ **–°—É–º–º–∞:** {order.total_price} ‚ÇΩ\n"
            f"üõçÔ∏è **–¢–æ–≤–∞—Ä—ã:**\n"
        )

        try:
            order_items = list(order.order_items.all())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–∫–∞–∑–∞ ID {order.id}: {e}")
            await callback_query.message.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–∫–∞–∑–∞.", parse_mode='Markdown')
            return

        for item in order_items:
            try:
                product_name = item.product.name
                total_price = item.product.price * item.quantity
                response += f"üå∏ - {product_name} x {item.quantity} = {total_price} ‚ÇΩ\n"
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∑–∞–∫–∞–∑–µ ID {order.id}: {e}")
                response += f"‚ùì - –¢–æ–≤–∞—Ä ID {item.id} x {item.quantity} = –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ ‚ÇΩ\n"

        await callback_query.message.reply(response, parse_mode='Markdown')

    elif data.startswith("change_"):
        try:
            order_id = int(data.split('_')[1])
            order = await sync_to_async(Order.objects.prefetch_related("order_items__product").get)(id=order_id)
        except (ValueError, Order.DoesNotExist):
            await callback_query.answer("‚ùó –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ ID {order_id}: {e}")
            await callback_query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.", show_alert=True)
            return

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"üîÑ {status_name}",
                    callback_data=f"set_status_{order.id}_{status_code}"
                )
                for status_code, status_name in Order.STATUS_CHOICES if status_code != order.status
            ]
        ])

        await callback_query.message.reply(
            f"üîÑ **–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞–∫–∞–∑–∞ ID {order.id}:**",
            reply_markup=keyboard
        )


@router.callback_query(lambda call: call.data and call.data.startswith('set_status_'))
async def set_status(callback_query: types.CallbackQuery):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ set_status callback_data: {repr(callback_query.data)}")

    if not await is_admin(callback_query.from_user.id):
        await callback_query.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.", show_alert=True)
        return

    clean_data = callback_query.data.strip()
    match = re.match(r"^set_status_(\d+)_(\w+)$", clean_data)

    if not match:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {clean_data} (–Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —à–∞–±–ª–æ–Ω—É)")
        await callback_query.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return

    order_id_str, new_status = match.groups()

    if not order_id_str.isdigit():
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–∫–∞–∑–∞: {order_id_str}")
        await callback_query.answer("‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–∫–∞–∑–∞.", show_alert=True)
        return

    order_id = int(order_id_str)

    try:
        order = await sync_to_async(Order.objects.get)(id=order_id)
    except Order.DoesNotExist:
        logger.error(f"–ó–∞–∫–∞–∑ —Å ID {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await callback_query.answer("‚ùó –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ ID {order_id}: {e}")
        await callback_query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.", show_alert=True)
        return

    if new_status not in dict(Order.STATUS_CHOICES).keys():
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {new_status}")
        await callback_query.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å.", show_alert=True)
        return

    try:
        old_status_display = dict(Order.STATUS_CHOICES)[order.status]
        new_status_display = dict(Order.STATUS_CHOICES)[new_status]
    except KeyError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await callback_query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞—Ç—É—Å–∞.", show_alert=True)
        return

    order.status = new_status
    try:
        await sync_to_async(order.save)()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ ID {order.id}: {e}")
        await callback_query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.", show_alert=True)
        return

    logger.info(f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ID {order.id} –∏–∑–º–µ–Ω–µ–Ω —Å {old_status_display} –Ω–∞ {new_status_display}")

    await callback_query.message.reply(
        f"‚úÖ **–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ID {order.id} –∏–∑–º–µ–Ω–µ–Ω —Å {old_status_display} –Ω–∞ {new_status_display}.**",
        parse_mode='Markdown'
    )
    await callback_query.answer("‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω")
