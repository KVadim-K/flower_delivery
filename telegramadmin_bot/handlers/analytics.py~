from aiogram import Router, types
from aiogram.filters import Command
from telegramadmin_bot.config import ADMIN_TELEGRAM_IDS
from asgiref.sync import sync_to_async
from orders.models import Order
from django.db.models import Sum, Count, F, ExpressionWrapper, FloatField
from django.utils import timezone
from django.db.models.functions import TruncDate
import logging
import matplotlib.pyplot as plt
from aiogram.types import BufferedInputFile
import io
import asyncio

logger = logging.getLogger('telegramadmin_bot')

router = Router()

async def is_admin(user_id):
    return user_id in ADMIN_TELEGRAM_IDS

@router.message(Command(commands=['analytics']))
async def order_analytics(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.reply("üö´ **–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.**")
        return

    try:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–∞–∫ /analytics –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        if not message.text or message.text.strip() != "/analytics":
            await message.reply("‚ùó **–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ:** `/analytics`")
            return

        # –£—Å—Ç–∞–Ω–æ–≤–∏–º –ø–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        end_datetime = timezone.now()
        start_datetime = end_datetime - timezone.timedelta(days=30)

        # –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        total_orders = await sync_to_async(Order.objects.filter(created_at__range=(start_datetime, end_datetime)).count)()
        total_sales = (await sync_to_async(Order.objects.filter(created_at__range=(start_datetime, end_datetime)).aggregate)(total_sales=Sum('total_price')))['total_sales'] or 0
        orders_per_status = await sync_to_async(list)(
            Order.objects.filter(created_at__range=(start_datetime, end_datetime))
                        .values('status')
                        .annotate(count=Count('id'))
        )

        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        orders_per_day = await sync_to_async(list)(
            Order.objects.filter(created_at__range=(start_datetime, end_datetime))
                        .annotate(day=TruncDate('created_at'))
                        .values('day')
                        .annotate(count=Count('id'))
                        .order_by('day')
        )

        sales_per_day = await sync_to_async(list)(
            Order.objects.filter(created_at__range=(start_datetime, end_datetime))
                        .annotate(day=TruncDate('created_at'))
                        .values('day')
                        .annotate(total_sales=Sum('total_price'))
                        .order_by('day')
        )

        # –¢–æ–ø-—Ç–æ–≤–∞—Ä–æ–≤
        best_selling_products = await sync_to_async(list)(
            Order.objects.values('order_items__product__name')
                        .annotate(total_quantity=Sum('order_items__quantity'))
                        .order_by('-total_quantity')[:5]
        )

        highest_revenue_products = await sync_to_async(list)(
            Order.objects.values('order_items__product__name')
                        .annotate(total_revenue=Sum(ExpressionWrapper(F('order_items__quantity') * F('order_items__product__price'), output_field=FloatField())))
                        .order_by('-total_revenue')[:5]
        )

        # –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞
        average_order_value = total_sales / total_orders if total_orders else 0

        # –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        unique_customers = await sync_to_async(Order.objects.filter(created_at__range=(start_datetime, end_datetime)).values('user').distinct().count)()
        new_customers = await sync_to_async(Order.objects.filter(
            created_at__range=(start_datetime, end_datetime),
            user__orders__created_at__lt=start_datetime  # –ò—Å–ø–æ–ª—å–∑—É–µ–º related_name='orders'
        ).values('user').distinct().count)()
        returning_customers = unique_customers - new_customers

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
        if not orders_per_day:
            await message.reply("üìâ **–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.**")
        else:
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö: –ó–∞–∫–∞–∑—ã –ø–æ –¥–Ω—è–º
            days = [item['day'] for item in orders_per_day]
            order_counts = [item['count'] for item in orders_per_day]

            buf = io.BytesIO()

            def plot():
                plt.figure(figsize=(10, 5))
                plt.plot(days, order_counts, marker='o', linestyle='-', color='blue')
                plt.title('üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –¥–Ω—è–º')
                plt.xlabel('üóì –î–∞—Ç–∞')
                plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤')
                plt.grid(True)
                plt.tight_layout()
                plt.savefig(buf, format='png')
                plt.close()

            # –ó–∞–ø—É—Å–∫–∞–µ–º plotting –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            await asyncio.to_thread(plot)
            buf.seek(0)

            # –û–±–µ—Ä–Ω–µ–º –±—É—Ñ–µ—Ä –≤ BufferedInputFile
            input_file = BufferedInputFile(buf.getvalue(), filename='orders_per_day.png')

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
            await message.reply_photo(
                input_file,
                caption="üìä **–ì—Ä–∞—Ñ–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –¥–Ω—è–º** üìä",
                parse_mode='Markdown'
            )

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        response = (
            f"üìä **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∑–∞–∫–∞–∑–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π** üìä\n\n"
            f"üî¢ **–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤:** {total_orders}\n"
            f"üí∞ **–û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂:** {total_sales} ‚ÇΩ\n"
            f"üìà **–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞:** {average_order_value:.2f} ‚ÇΩ\n\n"
            f"üë• **–ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:**\n"
            f"- üÜî **–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã:** {unique_customers}\n"
            f"- üÜï **–ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã:** {new_customers}\n"
            f"- üîÑ **–í–æ–∑–≤—Ä–∞—â–∞—é—â–∏–µ—Å—è –∫–ª–∏–µ–Ω—Ç—ã:** {returning_customers}\n\n"
            f"üìÇ **–ó–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:**\n"
        )
        for status_item in orders_per_status:
            status_display = dict(Order.STATUS_CHOICES).get(status_item['status'], status_item['status'])
            response += f"- üü¢ {status_display}: {status_item['count']}\n"

        response += f"\nüìÖ **–ó–∞–∫–∞–∑—ã –ø–æ –¥–Ω—è–º:**\n"
        for day_item in orders_per_day:
            day = day_item['day'].strftime('%Y-%m-%d')
            count = day_item['count']
            response += f"- {day}: {count} üì¶\n"

        response += f"\nüíµ **–ü—Ä–æ–¥–∞–∂–∏ –ø–æ –¥–Ω—è–º:**\n"
        for sale_item in sales_per_day:
            day = sale_item['day'].strftime('%Y-%m-%d')
            sales = sale_item['total_sales'] or 0
            response += f"- {day}: {sales} ‚ÇΩ üí∞\n"

        response += f"\nüèÜ **–¢–æ–ø-5 —Å–∞–º—ã—Ö –ø—Ä–æ–¥–∞–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:**\n"
        for product in best_selling_products:
            product_name = product['order_items__product__name']
            quantity = product['total_quantity']
            response += f"- {product_name}: {quantity} —à—Ç. üì¶\n"

        response += f"\nüí∏ **–¢–æ–ø-5 —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∞–∏–±–æ–ª—å—à–µ–π –≤—ã—Ä—É—á–∫–æ–π:**\n"
        for product in highest_revenue_products:
            product_name = product['order_items__product__name']
            revenue = product['total_revenue'] or 0
            response += f"- {product_name}: {revenue} ‚ÇΩ üíµ\n"

        await message.reply(response, parse_mode='Markdown')

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
        await message.reply("‚ö†Ô∏è **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.**")
