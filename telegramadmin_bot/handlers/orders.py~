# telegramadmin_bot/handlers/orders.py

from aiogram import Bot, Router, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from telegramadmin_bot.config import ADMIN_BOT_TOKEN, ADMIN_TELEGRAM_IDS
from orders.models import Order
from asgiref.sync import sync_to_async
import logging
import re

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=ADMIN_BOT_TOKEN)
logger = logging.getLogger('telegramadmin_bot')
router = Router()

async def is_admin(user_id):
    return user_id in ADMIN_TELEGRAM_IDS

async def notify_admins_of_new_order(order):
    order_items = await sync_to_async(list)(order.order_items.all())
    items_list = "\n".join([f"- {await sync_to_async(lambda: item.product.name)()} x {item.quantity}" for item in order_items])
    message_text = (
        f"üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n"
        f"**ID:** {order.id}\n"
        f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {order.user.username}\n"
        f"**–°—É–º–º–∞:** {order.total_price} ‚ÇΩ\n"
        f"**–¢–æ–≤–∞—Ä—ã:**\n{items_list}\n\n"
        f"**–°—Ç–∞—Ç—É—Å:** {order.get_status_display()}"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton("–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞", callback_data=f"detail_{order.id}"),
            InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"change_{order.id}")
        ]
    ])

    for admin_id in ADMIN_TELEGRAM_IDS:
        await bot.send_message(admin_id, message_text, reply_markup=keyboard, parse_mode="Markdown")


@router.message(Command(commands=['orders']))
async def list_orders(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    orders = await sync_to_async(list)(Order.objects.all().order_by('-created_at')[:10])
    if not orders:
        await message.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
        return

    for order in orders:
        username = await sync_to_async(lambda: order.user.username)()
        status_display = await sync_to_async(order.get_status_display)()
        created_at = await sync_to_async(order.created_at.strftime)('%Y-%m-%d %H:%M')

        detail_button = InlineKeyboardButton(text="–î–µ—Ç–∞–ª–∏", callback_data=f"detail_{order.id}")
        change_status_button = InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"change_{order.id}")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[detail_button, change_status_button]])

        await message.reply(
            f"ID: {order.id} | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} | –°—Ç–∞—Ç—É—Å: {status_display} | –î–∞—Ç–∞: {created_at}",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )

@router.message(Command(commands=['order']))
async def order_details(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    try:
        _, order_id_str = message.text.split()
        order_id = int(order_id_str)
        order = await sync_to_async(Order.objects.get)(id=order_id)
    except (ValueError, Order.DoesNotExist):
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /order <id>")
        return

    username = await sync_to_async(lambda: order.user.username)()
    status_display = await sync_to_async(order.get_status_display)()
    created_at = await sync_to_async(order.created_at.strftime)('%Y-%m-%d %H:%M')

    response = (
        f"**–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ ID: {order.id}**\n"
        f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {username}\n"
        f"**–°—Ç–∞—Ç—É—Å:** {status_display}\n"
        f"**–î–∞—Ç–∞:** {created_at}\n"
        f"**–ê–¥—Ä–µ—Å:** {order.address}, {order.city}, {order.postal_code}\n"
        f"**–¢–µ–ª–µ—Ñ–æ–Ω:** {order.phone_number}\n"
        f"**–°—É–º–º–∞:** {order.total_price} ‚ÇΩ\n"
        f"**–¢–æ–≤–∞—Ä—ã:**\n"
    )

    order_items = await sync_to_async(list)(order.order_items.all())
    for item in order_items:
        product_name = await sync_to_async(lambda: item.product.name)()
        response += f"- {product_name} x {item.quantity} = {item.product.price * item.quantity} ‚ÇΩ\n"

    await message.reply(response, parse_mode='Markdown')

@router.callback_query(lambda call: call.data and (call.data.startswith('detail_') or call.data.startswith('change_')))
async def callback_handler(callback_query: types.CallbackQuery):
    if not await is_admin(callback_query.from_user.id):
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.", show_alert=True)
        return

    data = callback_query.data
    if data.startswith("detail_"):
        try:
            order_id = int(data.split('_')[1])
            order = await sync_to_async(Order.objects.get)(id=order_id)
        except (ValueError, Order.DoesNotExist):
            await callback_query.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        username = await sync_to_async(lambda: order.user.username)()
        status_display = await sync_to_async(order.get_status_display)()
        created_at = await sync_to_async(order.created_at.strftime)('%Y-%m-%d %H:%M')

        response = (
            f"**–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ ID: {order.id}**\n"
            f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {username}\n"
            f"**–°—Ç–∞—Ç—É—Å:** {status_display}\n"
            f"**–î–∞—Ç–∞:** {created_at}\n"
            f"**–ê–¥—Ä–µ—Å:** {order.address}, {order.city}, {order.postal_code}\n"
            f"**–¢–µ–ª–µ—Ñ–æ–Ω:** {order.phone_number}\n"
            f"**–°—É–º–º–∞:** {order.total_price} ‚ÇΩ\n"
            f"**–¢–æ–≤–∞—Ä—ã:**\n"
        )

        order_items = await sync_to_async(list)(order.order_items.all())
        for item in order_items:
            product_name = await sync_to_async(lambda: item.product.name)()
            response += f"- {product_name} x {item.quantity} = {item.product.price * item.quantity} ‚ÇΩ\n"

        await callback_query.message.reply(response, parse_mode='Markdown')

    elif data.startswith("change_"):
        try:
            order_id = int(data.split('_')[1])
            order = await sync_to_async(Order.objects.get)(id=order_id)
        except (ValueError, Order.DoesNotExist):
            await callback_query.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text=status_name,
                        callback_data=f"set_status_{order.id}_{status_code}"
                    )
                    for status_code, status_name in Order.STATUS_CHOICES if status_code != order.status
                ]
            ]
        )

        await callback_query.message.reply(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞–∫–∞–∑–∞ ID {order.id}:",
            reply_markup=keyboard
        )

@router.callback_query(lambda call: call.data and call.data.startswith('set_status_'))
async def set_status(callback_query: types.CallbackQuery):
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ set_status callback_data: {repr(callback_query.data)}")

    if not await is_admin(callback_query.from_user.id):
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.", show_alert=True)
        return

    clean_data = callback_query.data.strip()
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π callback_data –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {repr(clean_data)}")

    match = re.match(r"^set_status_(\d+)_(\w+)$", clean_data)

    if not match:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {clean_data} (–Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —à–∞–±–ª–æ–Ω—É)")
        await callback_query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return

    order_id_str, new_status = match.groups()
    logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: order_id_str={order_id_str}, new_status={new_status}")

    if not order_id_str.isdigit():
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–∫–∞–∑–∞: {order_id_str}")
        await callback_query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–∫–∞–∑–∞.", show_alert=True)
        return

    order_id = int(order_id_str)

    try:
        order = await sync_to_async(Order.objects.get)(id=order_id)
    except Order.DoesNotExist:
        logger.error(f"–ó–∞–∫–∞–∑ —Å ID {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await callback_query.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    if new_status not in dict(Order.STATUS_CHOICES).keys():
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {new_status}")
        await callback_query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å.", show_alert=True)
        return

    old_status_display = await sync_to_async(lambda: dict(Order.STATUS_CHOICES)[order.status])()
    new_status_display = await sync_to_async(lambda: dict(Order.STATUS_CHOICES)[new_status])()

    order.status = new_status
    await sync_to_async(order.save)()

    logger.info(f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ID {order.id} –∏–∑–º–µ–Ω–µ–Ω —Å {old_status_display} –Ω–∞ {new_status_display}")

    await callback_query.message.reply(
        f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ID {order.id} –∏–∑–º–µ–Ω–µ–Ω —Å {old_status_display} –Ω–∞ {new_status_display}.",
        parse_mode='Markdown'
    )
    await callback_query.answer("–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω")
