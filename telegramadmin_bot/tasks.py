# telegramadmin_bot/tasks.py

from celery import shared_task
from orders.models import Order
from telegramadmin_bot.config import ADMIN_TELEGRAM_IDS, ADMIN_BOT_TOKEN
import logging
from aiogram import Bot, types
import asyncio

logger = logging.getLogger('telegramadmin_bot')


@shared_task
def send_new_order_notification(order_id):
    async def notify_admins_of_new_order(order):
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        user_username = await asyncio.to_thread(lambda: order.user.username)
        order_status = await asyncio.to_thread(order.get_status_display)
        created_at = await asyncio.to_thread(lambda: order.created_at.strftime('%Y-%m-%d %H:%M'))
        address, city, postal_code, phone_number, total_price = (
            order.address, order.city, order.postal_code, order.phone_number, order.total_price
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message = (
            f"üì¶ **–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ID: {order.id}**\n"
            f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user_username}\n"
            f"**–°—Ç–∞—Ç—É—Å:** {order_status}\n"
            f"**–î–∞—Ç–∞:** {created_at}\n"
            f"**–ê–¥—Ä–µ—Å:** {address}, {city}, {postal_code}\n"
            f"**–¢–µ–ª–µ—Ñ–æ–Ω:** {phone_number}\n"
            f"**–°—É–º–º–∞:** {total_price} ‚ÇΩ\n"
            f"**–¢–æ–≤–∞—Ä—ã:**\n"
        )

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
        order_items = await asyncio.to_thread(lambda: list(order.order_items.all()))
        for item in order_items:
            product_name = await asyncio.to_thread(lambda: item.product.name)
            product_price = await asyncio.to_thread(lambda: item.product.price)
            message += f"- {product_name} x {item.quantity} = {product_price * item.quantity} ‚ÇΩ\n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∑–∞–∫—Ä—ã—Ç–∏–µ–º –±–æ—Ç–∞
        async with Bot(token=ADMIN_BOT_TOKEN) as bot:
            detail_button = types.InlineKeyboardButton(text="–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞", callback_data=f"detail_{order.id}")
            change_status_button = types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"change_{order.id}")
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[detail_button, change_status_button]])

            for admin_id in ADMIN_TELEGRAM_IDS:
                try:
                    await bot.send_message(
                        chat_id=admin_id,
                        text=message,
                        reply_markup=keyboard,
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        order = Order.objects.prefetch_related('order_items__product').get(id=order_id)
        asyncio.run(notify_admins_of_new_order(order))
    except Order.DoesNotExist:
        logger.error(f"–ó–∞–∫–∞–∑ —Å ID {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
