# telegramadmin_bot/tasks.py

from celery import shared_task
from telegramadmin_bot.config import ADMIN_TELEGRAM_IDS, ADMIN_BOT_TOKEN
import logging
from aiogram import Bot, types
import asyncio

logger = logging.getLogger('telegramadmin_bot')

@shared_task
def send_notification_to_admins(order_id):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ.
    """
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
    from orders.models import Order

    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∑–∞–∫–∞–∑–∞ —Å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ —Ç–æ–≤–∞—Ä–∞–º–∏
        order = Order.objects.select_related("user").prefetch_related("order_items__product").get(id=order_id)
        order_items = list(order.order_items.all())
    except Order.DoesNotExist:
        logger.error(f"–ó–∞–∫–∞–∑ —Å ID {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ —Å ID {order_id}: {e}")
        return

    try:
        username = order.user.username
        status_display = order.get_status_display()
        items_list = "\n".join([
            f"üå∏ {item.product.name} x {item.quantity}" for item in order_items
        ])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ ID {order_id}: {e}")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    message_text = (
        f"üÜï **–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!**\n\n"
        f"üî¢ **ID:** {order.id}\n"
        f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {username}\n"
        f"üí∞ **–°—É–º–º–∞:** {order.total_price} ‚ÇΩ\n"
        f"üõçÔ∏è **–¢–æ–≤–∞—Ä—ã:**\n{items_list}\n\n"
        f"üì¶ **–°—Ç–∞—Ç—É—Å:** {status_display}"
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="üìÑ –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞", callback_data=f"detail_{order.id}"),
            types.InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"change_{order.id}")
        ]
    ])

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    async def send_messages():
        async with Bot(token=ADMIN_BOT_TOKEN) as bot:
            for admin_id in ADMIN_TELEGRAM_IDS:
                try:
                    await bot.send_message(
                        admin_id,
                        message_text,
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
    asyncio.run(send_messages())

